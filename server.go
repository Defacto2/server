package main

import (
	"context"
	"embed"
	"errors"
	"os"
	"runtime"

	"github.com/Defacto2/server/cmd"
	"github.com/Defacto2/server/handler"
	"github.com/Defacto2/server/internal/config"
	"github.com/Defacto2/server/internal/logger"
	"github.com/Defacto2/server/internal/postgres"
	"github.com/Defacto2/server/internal/postgres/models"
	"github.com/Defacto2/server/model"
	"github.com/caarlos0/env/v7"
	_ "github.com/lib/pq"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

//go:embed public/text/defacto2.txt
var brand []byte

//go:embed public/**/*
var public embed.FS

//go:embed view/**/*
var view embed.FS

// version is generated by the GoReleaser ldflags.
var version string

var (
	ErrCmd = errors.New("the command given did not work")
	ErrDB  = errors.New("could not initialize the database data")
	ErrEnv = errors.New("environment variable probably contains an invalid value")
	ErrLog = errors.New("the server cannot save any logs")
	ErrVer = errors.New("could not obtain the database server version value")
)

func main() {
	// Logger
	// Use the development log until the environment vars are parsed
	logs := logger.CLI().Sugar()

	// Environment configuration
	configs := config.Config{}
	if err := env.Parse(
		&configs, env.Options{Prefix: config.EnvPrefix}); err != nil {
		logs.Fatalf("%w: %s", ErrEnv, err)
	}
	configs = *Override(&configs)

	// Command-line arguments
	// By default the web server runs when no arguments are provided
	const exitProgram = 0
	if code, err := cmd.Run(version, &configs); err != nil {
		logs.Errorf("%s: %s", ErrCmd, err)
		os.Exit(code)
	} else if code >= exitProgram {
		os.Exit(code)
	}

	// Go runtime customizations
	if i := configs.MaxProcs; i > 0 {
		runtime.GOMAXPROCS(int(i))
	}

	// Configuration sanity checks
	configs.Checks(logs)

	// Setup the logger
	switch configs.IsProduction {
	case true:
		if err := configs.LogStorage(); err != nil {
			logs.Fatalf("%w: %s", ErrLog, err)
		}
		logs = logger.Production(configs.LogDir).Sugar()
	default:
		logs.Debug("The server is running in the DEVELOPMENT MODE.")
		logs = logger.Development().Sugar()
	}

	// Echo router and controller instance
	server := handler.Configuration{
		Brand:   &brand,
		Import:  &configs,
		Logger:  logs,
		Public:  public,
		Version: version,
		View:    view,
	}

	// Database
	if err := RepairDB(server); err != nil {
		if errors.Is(err, ErrVer) {
			logs.Errorf("%s, is the database server down?", ErrVer)
		}
		logs.Errorf("%s: %s", ErrDB, err)
	}
	server.RecordCount = RecordCount()

	// Controllers and routes
	e := server.Controller()

	// Start the HTTP server
	go server.StartHTTP(e)

	// Gracefully shutdown the HTTP server
	server.ShutdownHTTP(e)
}

// Override the configuration settings for development.
func Override(c *config.Config) *config.Config {
	// examples:
	// c.IsProduction = true
	// c.HTTPPort = 8080
	return c
}

// RepairDB, on startup check the database connection and make any data corrections.
func RepairDB(server handler.Configuration) error {
	db, err := postgres.ConnectDB()
	if err != nil {
		return err
	}
	defer db.Close()
	var ver postgres.Version
	ctx := context.Background()
	if err := ver.Query(); err != nil {
		return ErrVer
	}
	return model.RepairReleasers(os.Stderr, ctx, db)
}

// RecordCount returns the number of records in the database.
func RecordCount() int {
	db, err := postgres.ConnectDB()
	if err != nil {
		return 0
	}
	defer db.Close()
	ctx := context.Background()
	x, err := models.Files(qm.Where(model.ClauseNoSoftDel)).Count(ctx, db)
	if err != nil {
		return 0
	}
	return int(x)
}
