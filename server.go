package main

import (
	"context"
	"embed"
	"errors"
	"os"
	"runtime"

	"github.com/Defacto2/server/cmd"
	"github.com/Defacto2/server/handler"
	"github.com/Defacto2/server/internal/config"
	"github.com/Defacto2/server/internal/logger"
	"github.com/Defacto2/server/internal/postgres"
	"github.com/Defacto2/server/model"
	"github.com/caarlos0/env/v7"
	_ "github.com/lib/pq"
)

//go:embed public/text/defacto2.txt
var brand []byte

//go:embed public/**/*
var public embed.FS

//go:embed view/**/*
var view embed.FS

// version is generated by the GoReleaser ldflags.
var version string

var ErrVersion = errors.New("could not obtain the database server version value")

func main() {
	// Logger
	// Use the development log until the environment vars are parsed
	logs := logger.CLI().Sugar()

	// Environment configuration
	configs := config.Config{}
	if err := env.Parse(
		&configs, env.Options{Prefix: config.EnvPrefix}); err != nil {
		logs.Fatalf("Environment variable probably contains an invalid value: %s.", err)
	}

	// Command-line arguments
	// By default the web server runs when no arguments are provided
	const exitProgram = 0
	if code, err := cmd.Run(version, &configs); err != nil {
		logs.Errorf("The command given did not work: %s.", err)
		os.Exit(code)
	} else if code >= exitProgram {
		os.Exit(code)
	}

	// Go runtime customizations
	if i := configs.MaxProcs; i > 0 {
		runtime.GOMAXPROCS(int(i))
	}

	// Configuration sanity checks
	configs.Checks(logs)

	// Setup the logger
	switch configs.IsProduction {
	case true:
		if err := configs.LogStorage(); err != nil {
			logs.Fatalf("The server cannot save any logs: %s.", err)
		}
		logs = logger.Production(configs.LogDir).Sugar()
	default:
		logs.Debug("The server is running in the DEVELOPMENT MODE.")
		logs = logger.Development().Sugar()
	}

	// Cached global vars will go here, to avoid the garbage collection
	// They should be lockable

	// Echo router and controller instance
	server := handler.Configuration{
		Brand:   &brand,
		Import:  &configs,
		Logger:  logs,
		Public:  public,
		Version: version,
		View:    view,
	}

	// Database
	if err := repairDB(server); err != nil {
		if errors.Is(err, ErrVersion) {
			logs.Errorf("The database server version could not be obtained, " +
				"is the database server down?")
		}
		logs.Errorf("Could not initialize the database data: %s.", err)
	}

	// Controllers and routes
	e := server.Controller()

	// Start the HTTP server
	go server.StartHTTP(e)

	// Gracefully shutdown the HTTP server
	server.ShutdownHTTP(e)
}

// repairDB, on startup check the database connection and make any data corrections.
func repairDB(server handler.Configuration) error {
	db, err := postgres.ConnectDB()
	if err != nil {
		return err
	}
	defer db.Close()
	var psql postgres.Version
	ctx := context.Background()
	if err := psql.Query(); err != nil {
		return ErrVersion
	}
	return model.RepairReleasers(ctx, db)
}
