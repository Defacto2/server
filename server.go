// Package main is the entry point for the Defacto2 server application.
//
// Use the Task runner / build tool (https://taskfile.dev) to build or run the source code.
// $ task --list
//
// Repository: 	https://github.com/Defacto2/server
// Website:		https://defacto2.net
// License:
//
// Â© Defacto2, 2024
package main

import (
	"context"
	"embed"
	"errors"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"

	"github.com/Defacto2/server/cmd"
	"github.com/Defacto2/server/handler"
	"github.com/Defacto2/server/internal/command"
	"github.com/Defacto2/server/internal/config"
	"github.com/Defacto2/server/internal/logger"
	"github.com/Defacto2/server/internal/postgres"
	"github.com/Defacto2/server/internal/postgres/models"
	"github.com/Defacto2/server/model"
	"github.com/Defacto2/server/model/fix"
	"github.com/caarlos0/env/v10"
	_ "github.com/lib/pq"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"go.uber.org/zap"
)

//go:embed public/text/defacto2.txt
var brand []byte

//go:embed public/**/*
var public embed.FS

//go:embed view/**/*
var view embed.FS

// version is generated by the GoReleaser ldflags.
var version string

// LocalMode is used to always override the PRODUCTION_MODE and READ_ONLY environment variables.
// It removes the option to set a number environment variables when running the server locally.
// This is set using the -ldflags option when building the app.
//
// Example, go build -ldflags="-X 'main.LocalMode=true'", this will set the LocalMode variable to true.
var LocalMode string //nolint:gochecknoglobals

var (
	ErrCmd = errors.New("the command given did not work")
	ErrDB  = errors.New("could not initialize the database data")
	ErrEnv = errors.New("environment variable probably contains an invalid value")
	ErrFS  = errors.New("the directories repair broke")
	ErrLog = errors.New("the server cannot save any logs")
	ErrVer = errors.New("postgresql version request failed")
)

// main is the entry point for the application.
func main() {
	// Logger
	// Use the development log until the environment vars are parsed
	logr := logger.CLI().Sugar()

	// Environment variables configuration
	configs := configure(logr)

	// By default the web server runs when no arguments are provided
	commandLine(logr, configs)

	// Sanity checks
	sanity(logr, configs)

	// Setup the logger and print the startup production/read-only message
	logr = setupLogger(logr, configs)

	// Echo router and controller instance
	server := controller(logr, configs)

	// Controllers and routes
	e := server.Controller()

	// Startup information and warnings
	server.Info()

	// Start the HTTP and the TLS server
	switch {
	case configs.UseTLS() && configs.UseHTTP():
		go func() {
			e2 := e // we need a new echo instance, otherwise the server may use the wrong port
			server.StartHTTP(e2)
		}()
		go server.StartTLS(e)
	case configs.UseTLSLocal() && configs.UseHTTP():
		go func() {
			e2 := e // we need a new echo instance, otherwise the server may use the wrong port
			server.StartHTTP(e2)
		}()
		go server.StartTLSLocal(e)
	case configs.UseTLS():
		go server.StartTLS(e)
	case configs.UseHTTP():
		go server.StartHTTP(e)
	case configs.UseTLSLocal():
		go server.StartTLSLocal(e)
	default:
		// this should never happen as HTTPPort is always set to a default value
		logr.Fatalf("No server ports are configured, please check the environment variables.")
	}

	// List the local IP addresses that can also be used to access the server
	go func() {
		s, err := configs.Startup()
		if err != nil {
			logr.Errorf("%s: %s", ErrEnv, err)
		}
		fmt.Fprintf(os.Stdout, "%s\n", s)
	}()
	if localMode() {
		go func() {
			fmt.Fprint(os.Stdout, "Tap Ctrl + C, to exit at anytime.\n")
		}()
	}
	// Gracefully shutdown the HTTP server
	server.ShutdownHTTP(e)
}

// configure is used to parse the environment variables and set the Go runtime.
func configure(logr *zap.SugaredLogger) config.Config {
	configs := config.Config{}
	if err := env.Parse(&configs); err != nil {
		logr.Fatalf("%w: %s", ErrEnv, err)
	}
	configs.Override(localMode())

	// Go runtime customizations
	// If not set, the automaxprocs lib automatically set GOMAXPROCS to match Linux container CPU quota
	if i := configs.MaxProcs; i > 0 {
		runtime.GOMAXPROCS(int(i))
	}
	return configs
}

func controller(logr *zap.SugaredLogger, configs config.Config) handler.Configuration {
	// Echo router and controller instance
	server := handler.Configuration{
		Brand:   &brand,
		Import:  &configs,
		Logger:  logr,
		Public:  public,
		Version: version,
		View:    view,
	}
	if server.Version == "" {
		server.Version = cmd.Commit("")
	}
	server.RecordCount = RecordCount()
	return server
}

// commandLine is used to parse the command-line arguments.
func commandLine(logr *zap.SugaredLogger, c config.Config) {
	if logr == nil {
		return
	}
	code, err := cmd.Run(version, &c)
	if err != nil {
		logr.Errorf("%s: %s", ErrCmd, err)
		os.Exit(int(code))
	}
	useExitCode := code >= cmd.ExitOK
	if useExitCode {
		os.Exit(int(code))
	}
	// after the command-line arguments are parsed, continue with the web server
}

// sanity is used to perform a number of sanity checks on the file system and database.
func sanity(logr *zap.SugaredLogger, configs config.Config) {
	if configs.FastStart || logr == nil {
		return
	}
	// Configuration sanity checks
	if err := configs.Checks(logr); err != nil {
		logr.Errorf("%s: %s", ErrEnv, err)
	}
	// Confirm command requirements when not running in read-only mode
	checks(logr, configs.ReadMode)
	// Database connection checks
	if conn, err := postgres.New(); err != nil {
		logr.Errorf("%s: %s", ErrDB, err)
	} else {
		_ = conn.Check(logr, localMode())
	}
	// Repair assets on the host file system
	if err := configs.RepairFS(logr); err != nil {
		logr.Errorf("%s: %s", ErrFS, err)
	}
	// Repair the database on startup
	if err := RepairDB(logr); err != nil {
		repairdb(logr, err)
	}
}

// setupLogger is used to setup the logger.
func setupLogger(logr *zap.SugaredLogger, c config.Config) *zap.SugaredLogger {
	if logr == nil {
		return nil
	}
	if localMode() {
		s := "Welcome to the local Defacto2 web application."
		logr.Info(s)
		return logr
	}
	mode := "read-only mode"
	if !c.ReadMode {
		mode = "write mode"
	}
	switch c.ProductionMode {
	case true:
		if err := c.LogStorage(); err != nil {
			logr.Fatalf("%w: %s", ErrLog, err)
		}
		logr = logger.Production(c.LogDir).Sugar()
		s := "The server is running in a "
		s += strings.ToUpper("production, "+mode) + "."
		logr.Info(s)
	default:
		s := "The server is running in a "
		s += strings.ToUpper("development, "+mode) + "."
		logr.Warn(s)
		logr = logger.Development().Sugar()
	}
	return logr
}

// checks is used to confirm the required commands are available.
func checks(logr *zap.SugaredLogger, readonly bool) {
	if logr == nil || readonly {
		return
	}
	var buf strings.Builder
	for i, name := range command.Lookups() {
		if err := command.LookCmd(name); err != nil {
			buf.WriteString("\n\t\t\tmissing: " + name)
			buf.WriteString("\t" + command.Infos()[i])
		}
	}
	if buf.Len() > 0 {
		logr.Warnln("The following commands are required for the server to run in WRITE MODE",
			"\n\t\t\tThese need to be installed and accessible on the system path:"+
				"\t\t\t"+buf.String())
	}
	if err := command.LookupUnrar(); err != nil {
		if errors.Is(err, command.ErrVers) {
			logr.Warnf("Found unrar but " +
				"could not find unrar by Alexander Roshal, " +
				"is unrar-free mistakenly installed?")
		} else {
			logr.Warnf("%s: %s", ErrCmd, err)
		}
	}
}

// localMode is used to always override the PRODUCTION_MODE and READ_ONLY environment variables.
func localMode() bool {
	val, err := strconv.ParseBool(LocalMode)
	if err != nil {
		return false
	}
	return val
}

// RepairDB on startup checks the database connection and make any data corrections.
func RepairDB(logr *zap.SugaredLogger) error {
	if logr == nil {
		return fmt.Errorf("%w: %s", ErrLog, "no logger")
	}
	db, err := postgres.ConnectDB()
	if err != nil {
		return err
	}
	defer db.Close()
	var ver postgres.Version
	if err := ver.Query(); err != nil {
		return ErrVer
	}
	if localMode() {
		return nil
	}
	ctx := context.Background()
	return fix.All.Run(ctx, logr, db)
}

// repairdb is used to log the database repair error.
func repairdb(logr *zap.SugaredLogger, err error) {
	if logr == nil || err == nil {
		return
	}
	if errors.Is(err, ErrVer) {
		logr.Warnf("A %s, is the database server down?", ErrVer)
	} else {
		logr.Errorf("%s: %s", ErrDB, err)
	}
}

// RecordCount returns the number of records in the database.
func RecordCount() int {
	db, err := postgres.ConnectDB()
	if err != nil {
		return 0
	}
	defer db.Close()
	ctx := context.Background()
	fs, err := models.Files(qm.Where(model.ClauseNoSoftDel)).Count(ctx, db)
	if err != nil {
		return 0
	}
	return int(fs)
}
