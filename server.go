package main

/*
Package main is the entry point for the Defacto2 server application.

Use the Task runner / build tool (https://taskfile.dev) to build or run the source code.
$ task --list

Repository: 	https://github.com/Defacto2/server
Website:		https://defacto2.net
License:		GPL-3.0

Â© Defacto2, 2024-25
*/

import (
	"context"
	"database/sql"
	"embed"
	"fmt"
	"io"
	"log/slog"
	"math"
	"os"
	"runtime"
	"slices"
	"strings"

	"github.com/Defacto2/helper"
	"github.com/Defacto2/server/flags"
	"github.com/Defacto2/server/handler"
	"github.com/Defacto2/server/internal/config"
	"github.com/Defacto2/server/internal/out"
	"github.com/Defacto2/server/internal/postgres"
	"github.com/caarlos0/env/v11"
	_ "github.com/lib/pq"
)

var (
	//go:embed public/text/defacto2.txt
	brand []byte
	//go:embed public/**/*
	public embed.FS
	//go:embed view/**/*
	view    embed.FS
	version string // version is generated by the GoReleaser ldflags.
)

// var ErrLog = errors.New("cannot save logs")

// Main is the entry point for the application.
// By default the web server runs when no arguments are provided,
// otherwise, the command-line arguments are parsed and the application exits.
func main() {
	const msg = "defacto2 startup"
	const exit = 0
	// initialize a temporary logger, get and print the environment variable configurations.
	var w io.Writer = os.Stdout
	sl := out.Default(nil)
	configs := environmentVars(sl)
	if code := flagParser(w, sl, *configs); code >= exit {
		os.Exit(code)
	}
	if quiet := configs.Quiet.Bool(); quiet {
		w = io.Discard
		sl = out.Quiet(nil)
	}
	// print to standard output the server configuration
	startup := out.StartCustom(nil,
		bool(configs.Quiet), bool(configs.ProdMode))
	configs.Print(startup)
	// connect to the database and perform some repairs and sanity checks.
	// if the database is cannot connect, the web server will continue.
	db, err := postgres.Open()
	if err != nil {
		sl.Error(msg,
			slog.String("database", "could not initalize the database"),
			slog.Any("error", err))
	}
	defer func() { _ = db.Close() }()
	var database postgres.Version
	if err := database.Query(db); err != nil {
		sl.Error(msg,
			slog.String("postgres", "could not run the version query"),
			slog.Any("error", err))
	}
	config.TmpCleaner()
	config.TmpInfo(sl)
	// start the web server
	instance := newInstance(context.Background(), db, *configs)
	newline(w)
	welcomeMsg(sl, instance.RecordCount)
	logtoFiles(sl, configs)
	routing := instance.Controller(db, sl)
	instance.Info(sl, w)
	if err := instance.Start(routing, sl, *configs); err != nil {
		out.Fatal(sl, msg,
			slog.String("environment vars", "could not startup the server, please check the configuration"))
	}
	go func() {
		groupUsers(w, sl, msg)
		locAddresses(w, sl, configs, msg)
	}()
	// shutdown the web server after a signal is received.
	instance.ShutdownHTTP(routing, sl)
}

func newline(w io.Writer) {
	_, _ = fmt.Fprintln(w)
}

// logtoFiles saves logs to the file system.
func logtoFiles(sl *slog.Logger, configs *config.Config) {
	if mode := configs.ProdMode.Bool(); !mode {
		return
	}
	if err := configs.LogStore(); err != nil {
		out.Fatal(sl, "production mode",
			slog.String("store logs", "cannot save and store the web server logs"),
			slog.Any("error", err))
	}
	// logger = zaplog.Store(zaplog.Text(), string(configs.AbsLog)).Sugar()
}

// groupUsers returns the owner and group of the current process and
// writes them to the w io.writer.
func groupUsers(w io.Writer, sl *slog.Logger, msg string) {
	groups, usr, err := helper.Owner()
	if err != nil {
		sl.Error(msg,
			slog.String("own and group", "could not obtain the current user of this process"),
			slog.Any("error", err))
	}
	clean := slices.DeleteFunc(groups, func(e string) bool {
		return e == ""
	})
	_, _ = fmt.Fprintf(w, "Running as %s for the groups, %s.\n",
		usr, strings.Join(clean, ","))
}

// locAddresses returns the local IP addresses in use by the application and
// writes them to the w io.writer.
func locAddresses(w io.Writer, sl *slog.Logger, configs *config.Config, msg string) {
	// get the local IP addresses and print them to the console.
	localIPs, err := configs.Addresses()
	if err != nil {
		sl.Error(msg,
			slog.String("local address", "could not obtain the usable addresses"),
			slog.Any("error", err))
	}
	_, _ = fmt.Fprintf(w, "%s\n", localIPs)
}

// environmentVars is used to parse the environment variables and set the Go runtime.
// Defaults are used if the environment variables are not set.
//
// The configuration uses reference types to make the values immutable.
func environmentVars(sl *slog.Logger) *config.Config {
	const msg = "environment variables"
	configs := config.Config{
		Compression:   true,
		DatabaseURL:   postgres.DefaultURL,
		HTTPPort:      config.StdCustom,
		ProdMode:      true,
		ReadOnly:      true,
		SessionMaxAge: config.SessionHours,
	}
	if err := env.Parse(&configs); err != nil {
		out.Fatal(sl, msg,
			slog.String("parsing error", "does the variable contain an invalid value?"),
			slog.Any("error", err))
	}
	configs.Override()
	if i := configs.MaxProcs; i > 0 {
		runtime.GOMAXPROCS(int(math.Abs(float64(i))))
	}
	return &configs
}

// newInstance is used to create the server controller instance.
//
// The configuration returns a reference type to make the values immutable.
func newInstance(ctx context.Context, db *sql.DB, configs config.Config) *handler.Configuration {
	c := handler.Configuration{
		Brand:       brand,
		Environment: configs,
		Public:      public,
		Version:     version,
		View:        view,
	}
	if c.Version == "" {
		c.Version = flags.Commit("")
	}
	if ctx != nil && db != nil {
		c.RecordCount = config.RecordCount(ctx, db)
	}
	return &c
}

// flagParser is used to parse the command line arguments.
// If an error is returned, the application will exit with the error code.
// Otherwise, a negative value is returned to indicate the application should continue.
func flagParser(w io.Writer, sl *slog.Logger, configs config.Config) int {
	const msg = "parse flags"
	if sl == nil {
		return -1 // TODO:
	}
	code, err := flags.Run(w, version, &configs)
	if err != nil {
		sl.Error(msg,
			slog.String("run", "there was a problem parsing the command arguments"),
			slog.Int("exit code", int(code)),
			slog.Any("error", err))
		return int(code)
	}
	useExitCode := code >= flags.ExitOK
	if useExitCode {
		return int(code)
	}
	return -1
}

// welcomeMsg prints the welcome to message and returns the number
// of artifacts kept in the database. It customizes the log level based
// on the number of records vs the expected number.
func welcomeMsg(sl *slog.Logger, count int) {
	const welcome = "Welcome to the Defacto2 web application"
	help := ""
	switch {
	case count == 0:
		help = " with no database records"
		sl.Error(welcome + help)
	case config.MinimumFiles > count:
		help = " with too few records"
		sl.Warn(welcome+help,
			slog.Int("record count", count),
			slog.Int("expecting at least", config.MinimumFiles))
	default:
		sl.Info(welcome, slog.Int("artifact record count", count))
	}
}
