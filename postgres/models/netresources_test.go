// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNetresources(t *testing.T) {
	t.Parallel()

	query := Netresources()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNetresourcesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetresourcesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Netresources().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetresourcesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NetresourceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetresourcesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NetresourceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Netresource exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NetresourceExists to return true, but got false.")
	}
}

func testNetresourcesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	netresourceFound, err := FindNetresource(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if netresourceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNetresourcesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Netresources().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNetresourcesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Netresources().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNetresourcesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	netresourceOne := &Netresource{}
	netresourceTwo := &Netresource{}
	if err = randomize.Struct(seed, netresourceOne, netresourceDBTypes, false, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}
	if err = randomize.Struct(seed, netresourceTwo, netresourceDBTypes, false, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = netresourceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = netresourceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Netresources().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNetresourcesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	netresourceOne := &Netresource{}
	netresourceTwo := &Netresource{}
	if err = randomize.Struct(seed, netresourceOne, netresourceDBTypes, false, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}
	if err = randomize.Struct(seed, netresourceTwo, netresourceDBTypes, false, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = netresourceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = netresourceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func netresourceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func netresourceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func netresourceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func netresourceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func netresourceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func netresourceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func netresourceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func netresourceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func netresourceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Netresource) error {
	*o = Netresource{}
	return nil
}

func testNetresourcesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Netresource{}
	o := &Netresource{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, netresourceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Netresource object: %s", err)
	}

	AddNetresourceHook(boil.BeforeInsertHook, netresourceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	netresourceBeforeInsertHooks = []NetresourceHook{}

	AddNetresourceHook(boil.AfterInsertHook, netresourceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	netresourceAfterInsertHooks = []NetresourceHook{}

	AddNetresourceHook(boil.AfterSelectHook, netresourceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	netresourceAfterSelectHooks = []NetresourceHook{}

	AddNetresourceHook(boil.BeforeUpdateHook, netresourceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	netresourceBeforeUpdateHooks = []NetresourceHook{}

	AddNetresourceHook(boil.AfterUpdateHook, netresourceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	netresourceAfterUpdateHooks = []NetresourceHook{}

	AddNetresourceHook(boil.BeforeDeleteHook, netresourceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	netresourceBeforeDeleteHooks = []NetresourceHook{}

	AddNetresourceHook(boil.AfterDeleteHook, netresourceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	netresourceAfterDeleteHooks = []NetresourceHook{}

	AddNetresourceHook(boil.BeforeUpsertHook, netresourceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	netresourceBeforeUpsertHooks = []NetresourceHook{}

	AddNetresourceHook(boil.AfterUpsertHook, netresourceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	netresourceAfterUpsertHooks = []NetresourceHook{}
}

func testNetresourcesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNetresourcesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(netresourceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNetresourcesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNetresourcesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NetresourceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNetresourcesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Netresources().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	netresourceDBTypes = map[string]string{`ID`: `bigint`, `UUID`: `character`, `Legacyid`: `bigint`, `Httpstatuscode`: `bigint`, `Httpstatustext`: `character varying`, `Httplocation`: `character varying`, `Httpetag`: `character varying`, `Httplastmodified`: `character varying`, `Metatitle`: `character varying`, `Metadescription`: `character varying`, `Metaauthors`: `character varying`, `Metakeywords`: `character varying`, `Uriref`: `character varying`, `Title`: `character varying`, `DateIssuedYear`: `smallint`, `DateIssuedMonth`: `smallint`, `DateIssuedDay`: `smallint`, `Comment`: `text`, `Categorykey`: `character varying`, `Categorysort`: `character varying`, `Deletedat`: `timestamp with time zone`, `Deletedatcomment`: `character varying`, `Createdat`: `timestamp with time zone`, `Updatedat`: `timestamp with time zone`}
	_                  = bytes.MinRead
)

func testNetresourcesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(netresourcePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(netresourceAllColumns) == len(netresourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNetresourcesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(netresourceAllColumns) == len(netresourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Netresource{}
	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, netresourceDBTypes, true, netresourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(netresourceAllColumns, netresourcePrimaryKeyColumns) {
		fields = netresourceAllColumns
	} else {
		fields = strmangle.SetComplement(
			netresourceAllColumns,
			netresourcePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NetresourceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNetresourcesUpsert(t *testing.T) {
	t.Parallel()

	if len(netresourceAllColumns) == len(netresourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Netresource{}
	if err = randomize.Struct(seed, &o, netresourceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Netresource: %s", err)
	}

	count, err := Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, netresourceDBTypes, false, netresourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Netresource struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Netresource: %s", err)
	}

	count, err = Netresources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
