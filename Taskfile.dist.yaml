# https://taskfile.dev/installation/

version: '3'

vars:
  BINNAME: df2-server # build output, binary filename (without extension) 
  SERVEPORT: 1323     # web server port number
  LOGREQUESTS: true
  NOROBOTS: false

tasks:
  default:
    desc: "Task runner for the Defacto2 web server source code."
    cmds:
      - task --list-all
    silent: true
  file-sync:
    desc: "Sync the source code to the remote server."
    cmds:
      - rsync --info=progress2 --recursive --human-readable ben@dz.defacto2.net:/opt/assets-defacto2/downloads /home/ben/defacto2-assets/downloads/
      - rsync --info=progress2 --recursive --human-readable ben@dz.defacto2.net:/opt/assets-defacto2/images000 /home/ben/defacto2-assets/images000/
      - rsync --info=progress2 --recursive --human-readable ben@dz.defacto2.net:/opt/assets-defacto2/images400 /home/ben/defacto2-assets/images400/
  doc:
    desc: "Generate and view the documentation website."
    cmds:
      - cmd: pkgsite
    silent: true
  lint:
    silent: false
    desc: Runs the go formatter and lints the source code.
    ignore_error: true
    cmds:
      - cmd: clear
        platforms: [linux, darwin, freebsd]
      - cmd: gofumpt -w .
      - cmd: golangci-lint run
  build:
    desc: "Build the binary of the web server."
    deps: [assets]
    cmds:
      - cmd: echo "Building..."
      - cmd: go build -o {{.BINNAME}} -v server.go
        platforms: [linux, darwin, freebsd]
      - cmd: go build -o {{.BINNAME}}.exe -v server.go
        platforms: [windows]
      - cmd: echo "Done!"
  build-race:
    desc: "Build the binary of the web server with race detection."
    deps: [assets]
    cmds:
      - cmd: echo "Building with race conditions..."
      - cmd: go build -o {{.BINNAME}} -race -v server.go
        platforms: [linux, darwin, freebsd]
      - cmd: go build -o {{.BINNAME}}.exe -race -v server.go
        platforms: [windows]
      - cmd: ./{{.BINNAME}} --version
        platforms: [linux,darwin]
      - cmd: ./{{.BINNAME}}.exe --version
        platforms: [windows]
      - cmd: echo "Done!"
  assets:
    desc: "Build, compile and compress the web serve CSS and JS assets."
    cmds:
      - echo "Building assets..."
      - go run runner/runner.go
      - echo "Done!"
  test:
    desc: "Run the test suite."
    cmds:
      - go test -v ./...
  testr:
    desc: "Run the test suite with the slower race detection."
    cmds:
      - go test -race -v ./...
  serve:
    desc: "Run the internal web server in development mode with live reload."
    cmds:
      - task: serve-linux
      - task: serve-macos
      - task: serve-windows
  serve-prod:
    desc: "Run the internal web server with live reload."
    cmds:
      - task: serve-linux
      - task: serve-macos
      - task: serve-windows-prod
  serve-linux:
    internal: true
    platforms: [linux, freebsd] # other supported os can be added here
    env:
      DEFACTO2_PRODUCTION: false
      DEFACTO2_PORT: "{{.SERVEPORT}}"
      DEFACTO2_REQUESTS: "{{.LOGREQUESTS}}"
      DEFACTO2_NOROBOTS: "{{.NOROBOTS}}"
      DEFACTO2_DOWNLOAD: /home/ben/defacto2-assets/downloads
      DEFACTO2_SCREENSHOTS: /home/ben/defacto2-assets/images000
      DEFACTO2_THUMBNAILS: /home/ben/defacto2-assets/images400
    deps: [assets]
    cmds:
      - air
  serve-macos:
    internal: true
    platforms: [darwin]
    env:
      DEFACTO2_PRODUCTION: false
      DEFACTO2_PORT: "{{.SERVEPORT}}"
      DEFACTO2_REQUESTS: "{{.LOGREQUESTS}}"
      DEFACTO2_NOROBOTS: "{{.NOROBOTS}}"
      DEFACTO2_DOWNLOAD: /Users/ben/defacto2-assets/downloads
      DEFACTO2_SCREENSHOTS: /Users/ben/defacto2-assets/images000
      DEFACTO2_THUMBNAILS: /Users/ben/defacto2-assets/images400
    deps: [assets]
    cmds:
      - air
  serve-air-prod:
    internal: true
    platforms: [darwin, linux, freebsd] # other supported os can be added here
    env:
      DEFACTO2_PRODUCTION: true
      DEFACTO2_PORT: "{{.SERVEPORT}}"
      DEFACTO2_REQUESTS: "{{.LOGREQUESTS}}"
      DEFACTO2_NOROBOTS: "{{.NOROBOTS}}"
    cmds:
      - air
  serve-windows:
    internal: true
    platforms: [windows]
    env:
      DEFACTO2_PRODUCTION: false
      DEFACTO2_PORT: "{{.SERVEPORT}}"
      DEFACTO2_REQUESTS: "{{.LOGREQUESTS}}"
      DEFACTO2_NOROBOTS: "{{.NOROBOTS}}"
      DEFACTO2_THUMBNAILS: "F:\\Defacto2\\images400"
    deps: [assets]
    cmds:
      - air -c .air.windows.toml 
  serve-windows-prod:
    internal: true
    platforms: [windows]
    env:
      DEFACTO2_PRODUCTION: true
      DEFACTO2_PORT: "{{.SERVEPORT}}"
      DEFACTO2_REQUESTS: "{{.LOGREQUESTS}}"
      DEFACTO2_NOROBOTS: "{{.NOROBOTS}}"
      DEFACTO2_THUMBNAILS: "F:\\Defacto2\\images400"
    deps: [assets]
    cmds:
      - air -c .air.windows.toml 
  pkg-patch:
    silent: false
    desc: Update and apply patches to the web server dependencies.
    cmds:
      - cmd: go get -u=patch -x
      - cmd: go mod verify
  pkg-update:
    silent: false
    desc: Update the web server dependencies.
    cmds:
      - cmd: go get -u -x
      - cmd: go mod verify
  ver:
    silent: false
    desc: Print the versions of the build and compiler tools.
    ignore_error: true
    cmds:
      - cmd: go version
      - cmd: gofumpt --version
      - cmd: task --version
      - cmd: golangci-lint --version
      - cmd: goreleaser --version
      - cmd: air -v
      - cmd: esbuild --version
  _init:
    silent: false
    desc: "Initialise this project for the first time after a git clone."
    cmds:
      - cmd: go install mvdan.cc/gofumpt@latest
      - cmd: go install github.com/cosmtrek/air@latest
      - cmd: go install github.com/goreleaser/goreleaser@latest
      - cmd: go install github.com/evanw/esbuild/cmd/esbuild@latest
