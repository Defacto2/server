{{- /*  artifact_jsdos6.tmpl  */}}
{{- define "artifactJSDOS6" -}}
{{- if eq (index . "jsdos6") true}}
{{- $download := index . "download"}}
{{- $filename := index . "filename"}}
{{- $runProgram := index . "jsdos6Run"}}
{{- $extract := index . "jsdos6Zip"}}
{{- $runJS := "startBinary(DosBoxConfig);"}}
{{- if eq $extract true}}{{ $runJS = "startZip(DosBoxConfig);" }}{{end}}
{{- /*  js-dos v6.22 ~ canvas and user interface. */}}
<div class="modal fade" id="jsDOSModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="jsDOSModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-body">  
                <canvas id="jsdos6"></canvas>  
            </div>
            <div class="modal-footer">
                <label class="form-check-label">
                    {{$filename}} &nbsp;
                </label>
                <button id="jsdosFullscreen" class="btn btn-outline-secondary">Fullscreen</button>
                <button id="jsdosScreenshot" class="btn btn-outline-secondary">Screenshot</button>
                <button id="jsdosStop" class="btn btn-outline-danger">Stop</button>
                <button type="button" id="jsdosCloser" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script defer>
    const canvas = document.getElementById("jsdos6");
    const stopButton = document.getElementById("jsdosStop")
    stopButton.addEventListener("click", () => {
        try {
            ci.exit();
            stopButton.disabled = true;
        } catch (error) {
            console.log("ci.exit() error: ", error);
        }
    });
    document.getElementById(`jsdosFullscreen`).addEventListener("click", () => {
        canvas.requestFullscreen();
    });
    document.getElementById(`jsdosScreenshot`).addEventListener("click", screenshot);
    function screenshot() {
        console.log("screenshot: for canvas of {{$filename}}");
        let dataURL = canvas.toDataURL("image/png");
        let a = document.createElement("a");
        a.href = dataURL;
        a.download = "{{$filename}}.png";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
    function startBinary(options) {
        Dos(canvas, options).ready((fs, main) => {
            fs.createFile("dosbox.conf", `\t[dosbox]\n\tmachine=vga\n`);
            fetch('/d/{{$download}}')
            .then(response => response.arrayBuffer())
            .then(arrayBuffer => {
                fs.createFile("{{$filename}}", arrayBuffer);
                main(["-conf", "dosbox.conf", "-c", "{{$filename}}"]).then((ci) => {
                    window.ci = ci;
                    console.log(`width: ${ci.dos.canvas.width}, height: ${ci.dos.canvas.width}`);
                });
            })
        });
    }
    function startZip(options) {
        Dos(canvas, options).ready((fs, main) => {
            fs.extract("/d/{{$download}}").then(() => {
                fs.createFile("dosbox.conf", `\t[dosbox]\n\tmachine=vga\n`);
                main(["-conf", "dosbox.conf", "-c", "{{$runProgram}}"]).then((ci) => {
                    window.ci = ci;
                    console.log(`width: ${ci.dos.canvas.width}, height: ${ci.dos.canvas.width}`);
                });
            });
        });
    }
    const jsdos = document.getElementById("jsdosRunLink");
    jsdos.addEventListener("click", function () {
        this.style.pointerEvents = "none";
        this.textContent = "Running, reload tab to stop";
        DosBoxConfig = {
            wdosboxUrl: "/js/wdosbox.js",
            cycles: "auto", // int value, "max" or "auto"
            autolock: false,
        };
        {{ $runJS | safeJS }}
    });
    const jsQuit = document.getElementById("jsdosCloser");
    jsQuit.addEventListener("click", () => {
        location.reload();
    });
</script>
{{- end}}{{ end }}