{{- /*
  apps.tmpl ~ Modern applications and tools.
*/ -}}
{{- define "content" }}
<hr>
<div class="container">
<div class="row">
<div class="col-12 col-xxl-6">
<p class="lead">
  Easily identify files
</p>
<p>
  In the DOS and Amiga era it was common for groups to use false filename extensions to either brand files with their acronyms or to obfuscate the purpose of the file.
  Linux and Macs have the great but often forgotten, <code>file</code> terminal tool for determining file type.
</p>
<pre>
$ file ART.GRP
> ART.GRP: ISO-8859 text, with CRLF line terminators, 
> with escape sequences

$ file VAL.DAT
> VAL.DAT: LHa (2.x) archive data

$ file image.iff
> image.iff: IFF data, ILBM interleaved image, 320 x 54
</pre>
</div>
<div class="col-12 col-xxl-6">
<p class="lead">
  Obscure files
</p>
<p>
While the <code>file</code> tool is great, it is not always useful for ancient file content created on the microcomputers or PCs of the 1980s. 
For this, the best tool is <a href="https://github.com/jsummers/deark">Deark</a>, <q>a utility for file format and metadata analysis</q>.
</p>
<p>
This example is an image created in 1984's <a href="https://winworldpc.com/product/pc-paint/100a">PCPaint</a>. 
Modern tools cannot recognize it, while Deark identifies the picture and converts it to a PNG image, <a href="/image/new/output.000.png">output.000.png</a>.
</p>
<pre>
$ file VIEW2KIL.PIC
> VIEW2KIL.PIC: data
</pre>
<pre>
$ deark VIEW2KIL.PIC
> Module: bsave
> Format: BSAVE-PC 4-color, 320Ã—200
> Warning: BSAVE formats can't be reliably identified. 
> Writing output.000.png
</pre>
</div></div>
<hr>
<p class="lead">
  Reading <strong>texts</strong>, <a href="https://vscodium.com">VSCodium</a>
</p>
<p class="clearfix">
  <img src="/image/new/vscodium.webp" class="rounded img-fluid float-end" style="max-width:270px;" alt="VSCodium app screenshot reading a text file">
  VSCodium is the free, open source compile of the popular programming IDE, VS Code by Microsoft.
  But without the bloat of the MS programming extensions, telemetry, or clanker AI integration.
  VSCodium supports extremely large files, offers a mini-map preview, and provides <u>the best Code Page text support</u> of any modern editor.
  <br><br>
  Some recommended tweaks for VSCodium.<br>
  1. Navigate to <small>File > Preferences > Settings</small><br>
  2. Search for <small><q>files:encoding</q></small>, then change <q>UTF-8</q> to <q>DOS (CP 437)</q><br>
  3. Search for <small><q>editor:language detection</q></small>, then uncheck <q>Workbench > Editor:Language Detection</q>
</p>
<hr>
<p class="lead">
  Reading <strong>ansi</strong> text, 
  <a href="https://blocktronics.github.io/moebius/">Moebius</a> or <a href="https://github.com/bengarrett/retrotxtgo">retrotxtgo</a>
</p>
<p class="clearfix">
  <img src="/image/new/moebius.webp" class="rounded img-fluid float-end" style="max-width:300px;" alt="Moebius app screenshot display ansi art">
  Moebius is a feature complete ANSI art editor which is a good choice to use as a viewer on modern systems.<br>
  I do not use it for plain text or NFO text files as it isn't as performant as VSCodium, and does not handle long text files.
  <br>
  retrotxtgo is a terminal application that will correctly print legacy CP-437 encoded text and ANSI files in a modern terminal emulator.
  <br><br><code>
    $ retrotxt view RELEASE.NFO
  </code>
  <br><br>
  There's also the <a href="https://retrotxt.com/">RetroTxt web extension</a> that will render ANSI art and text in the browser like HTML. 
  However, as browsers are very cautious with rendering, not all ANSI art will work. 
  There are times the browser will treat a file as binary data and refuse to render the page.
</p>
<hr>
<p class="lead">
  Running programs for <strong>DOS</strong>, 
  <a href="https://dosbox-x.com">DOSBox-X</a> or <a href="https://www.dosbox-staging.org">DOSBox Staging</a>
</p>
<p class="clearfix">
  <img src="/image/new/dosbox.webp" class="rounded img-fluid float-end" style="max-width:300px;" alt="DOSBox app running an intro screenshot">
  DOS on the PC is the original operating system for the Intel x86 computer platform 
  and was in wide use from 1981 until the late 1990s, when Microsoft's Windows took over.
  DOS lifted a number of ideas and syntax from the earlier CP/M, a system that was popular in the 1970s!
  Meaning its limited parser, hardware configurations, and usage is primitive, 
  and why we don't bother <a href="https://86box.net">emulating</a> the platform.
  <br>
  <small>Different companies offered DOS on the PC, 
  the most famous is MS-DOS by Microsoft, 
  but there is PC-DOS for IBM, or DR-DOS by Digital Research, and they're all inter-compatible.
  Confusingly, you may also read of Apple DOS or Atari DOS but these are unrelated to the PC.
  </small>
  <br><br>
  Instead, DOSBox is the easiest option for running DOS applications under modern systems.
  While DOSBox still has a learning curve due to the poor design choices of the PC platform.
  It is a great ecosystem to get DOS software working under, 
  and generally simpler than using real hardware.
  <br><br>
  The original DOSBox software hasn't been updated in years, 
  but DOSBox Staging has taken the source and continued improvements. 
  Also, DOSBox-X in an option for those who want a user-interface for configurations.
  Unfortunately, I find the menus and dialogues a mess of spaghetti and hard to navigate.
</p>
<hr>
<p class="lead">
    Running old programs for <strong>Windows</strong> 
</p>
<p>
 As there are multiple generations of Windows operating systems spanning decades, Windows 3.x, Windows 9x, Windows NT, 2000, XP, 7...<br>
 Software compatibility depends on the Windows target and the programming APIs that the software uses.<br>
 <ul class="clearfix">
  <li>A good platform for running most software that targets the earlier Windows 3.x and Windows 9x era of the 1990s would be to use <strong>Windows 2000</strong>.</li>
  <li>For Windows software from the 2000s and some of the 2010s, <strong>Windows XP</strong> will often work, as it was the longest supported edition of Windows from that era.</li>
 </ul>
</p>
<p>
  <img src="/image/new/parallel.webp" class="rounded img-fluid float-end" style="max-width:300px;" alt="DOSBox app running an intro screenshot">
  I use an old Intel Mac combined with Parallels Desktop for running both Windows 2000 and Windows XP. 
  Parallels Desktop <a href="https://kb.parallels.com/129252">up to release</a> 18.x (from 2022) offers sound, graphics, mouse, and networking for both Windows 2000 and XP, 
  as well as clipboard support for the copying of both text and files between the Mac and Windows desktops, and save state snapshots. 
  I find Parallels is much easier to get up and running with legacy Windows compared to the free but jank <a href="https://www.virtualbox.org">VirtualBox</a> option.
</p><p>
  Used Intel Macs are cheap these days, but make sure it has at least 8 GB of memory and a solid-state drive. 
  Old releases of Parallels Desktop was sold boxed and at retailers; just avoid the one-year subscription editions.
  Older copies of Windows can be found second-hand, 
  and at <a href="https://winworldpc.com/library/operating-systems">WinWorld</a>,
  or at archive.org searching <q>windows xp service pack 3</q>.
</p><p>
  And do not connect your ancient copies of Windows to the Internet. 
  Instead, use the host Mac to download and extract any files and copy/paste those to the desktop of your running Windows 2000 or XP.
</p>
<hr>
<div class="container">
<div class="row">
<div class="col-12 col-xxl-6">
<p class="lead">
  Playing <strong>ANSimations</strong>
</p>
<p>
  The best way to animate these is to use DOSBox or one of its derivatives, 
  and configure it to use very slow CPU cycles by tapping <kbd>F12</kbd> <kbd>-</kbd>.
  <p>Then use the type command to play the ansi file animation:<br><code>C:\> TYPE JD-ANIM.ANS</code></p>
  Or, you can download one of the many ANSI art viewers written by the artscene in the 1990s and run that under DOSBox, 
  <a href="https://demozoo.org/productions/270071/">TRiBEview</a> or <a href="/f/ac44e5">ACiD View</a>.
</p>
</div>
<div class="col-12 col-xxl-6">
<p class="lead">
  Viewing old <strong>image</strong> formats, <a href="https://www.xnview.com/en/xnview/">XnView</a> 
</p>
<p>
  There's a lot of image formats that were common place in the 16-bit microcomputer era, but
  were not adopted by the worldwide web or digital photography, and have been forgotten.
  The most common incompatible binary found on the site is the Amiga IFF (Interchangeable File Format)
  which usually uses the <code>.iff</code> or <code>.lbm</code> filename extensions.
</p>
<hr>
<p class="lead">
  Viewing old <strong>videos</strong>, <a href="https://www.videolan.org/vlc/">VLC media player</a>
</p>
<p>
  Most of the old AVI video codecs used by sceners for promotional and bumper videos etc are usually compatible with VLC.
</p>
</div></div></div>
<hr>
<div class="container">
<div class="row">
<div class="col-12 col-xxl-6">
<p class="lead">
  Bonus, <strong>duplicate</strong> file eraser, <code>fdupes</code><small> by Adrian Lopez</small>
</p>
<p>
  The fdupes app is the best tool we have found and is on many Linux distributions plus offered by brew for macOS.
</p>
<p>
  To list any duplicate files:<br><code>fdupes --recurse --time --size .</code><br>
  To select and remove dupes:<br><code>fdupes --recurse --order=time --delete .</code><br>
  To batch delete without prompts:<br><code>fdupes --recurse --order=time --delete --noprompt .</code><br>
</p>
</div>
<div class="col-12 col-xxl-6">
<p class="lead">
  Bonus, <strong>hex</strong> editor, <a href="https://github.com/WerWolv/ImHex">ImHex</a>
</p>
<p class="clearfix">
  <img src="/image/new/imhex.webp" class="rounded img-fluid float-end" style="max-width:250px;" alt="ImHex app viewing a hacked DOS binary screenshot">
  There are numerous editors on every platform, but I find the open source, multi-platform ImHex useful for browsing, categorising and searching string data in a file.
  It's amazing how much additional information can be gained from the Scene in the 1980s that is discovered hidden in embedding texts injected into binary files.
</p>
</div></div></div>
<hr>
{{- end}}
